#include<stdio.h>
#include<stdlib.h>
#define SIZE 5
int queue[SIZE], front=-1, rear=-1;
int isEmpty(){
   return (front ==1)? 1 : 0;
}
int isfull(){
    return((rear+1)%SIZE == front) ? 1 : 0;
}
void enqueue(int data){
  
    rear = (rear+1)%SIZE;
    queue[rear] = data;
    if(front ==-1)
    front=rear;
    printf("Element Inserted !!!!\n");
}

int dequeue(){
    int data = queue[front];
    if(front ==rear)
    front=rear=-1;
    else 
    front = (front+1)%SIZE;
    return front;
    
}
int peek(){
    return queue[front];
}
int display(){
    printf("Queue Elements are : \n");
    int i=front;
    while(i !=rear){
        printf("%d" , queue[i]);
        i = (i+1)%SIZE;
    }
    printf("%d" , queue[rear]);

    }
    
int main(){
    while(1){
        printf("-----Circular Queue-----\n");
        printf("1. Enqueue\n");
        printf("2.Dequeue\n");
        printf("3.Peek\n");
        printf("4.Display\n");
        printf("5.Exit\n");
        int choice, data;
        printf("Enter Choice : ");
        scanf("%d" , &choice);
        switch(choice) {
            case 1:
            if(isfull())
            printf("Queue overflow !!!\n");
            else {
                printf("enter element : ");
                scanf("%d" , &data);
            }
                
            
            
            break;
            case 2 :
            if(isEmpty())
            printf("Queue underflow");
            else
            printf("%d is dequeue \n" , dequeue());
            break;
            case 3 : 
            if(isEmpty())
            printf("Queue is empty!!!\n");
            else
            printf("element available in front of queue is %d\n" , peek);
            break;
            case 4 :
            if(isEmpty())
            printf("Queue is empty!!!\n");
            else
            display();
            break;
            case 5 :
            exit(0);
            break;
            default :
            printf("Invalid choice !!!\n");
            
        }
        printf("\n");
    }
    return 0;
        
    }
